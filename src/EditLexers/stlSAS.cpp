#include "EditLexer.h"
#include "EditStyleX.h"

static KEYWORDLIST Keywords_SAS = {{
//++Autogenerated -- start of section automatically generated
"abort alter and array asc attrib by call cards cards4 catname checkpoint connect constraints continue create "
"data datalines datalines4 delete desc describe disconnect distinct do drop "
"else end endsas eq error execute execute_always file filename footnote format from ge goto group gt having "
"if in index infile informat input insert into keep label le leave length libname link list lock lockdown lostcard lt "
"max merge min missing modify ne not options or order otherwise output page proc put putlog quit "
"redirect remove rename replace reset resetline retain return run sasfile select set skip stop sysecho table then title "
"unique until update validate values view when where while "

, // 1 macro
"abort bquote( cmpres( compstor( copy datatyp( do ds2csv( else end eval( global goto if include index( kverify( "
"left( length( let list local lowcase( macro mend nrbquote( nrquote( nrstr( put "
"qcmpres( qleft( qlowcase( qscan( qsubstr( qsysfunc( qtrim( quote( qupcase( return run "
"scan( str( substr( superq( symdel symexist( symglobl( symlocal( syscall sysevalf( sysexec sysfunc( sysget( syslput "
"sysmacdelete sysmacexec( sysmacexist( sysmexecdepth sysmexecname( sysmstoreclear sysprod( sysrc( sysrput "
"then to trim( tslit( unquote( until upcase( verify( while "

, // 2 functions
"abs( addrlong( airy( allcomb( allcombi( allperm( anyalnum( anyalpha( anycntrl( anydigit( anyfirst( anygraph( anylower( "
"anyname( anyprint( anypunct( anyspace( anyupper( anyxdigit( arcos( arcosh( arsin( arsinh( artanh( "
"atan( atan2( attrc( attrn( "
"band( beta( betainv( bhamming_32( bhamming_hex( blackclprc( blackptprc( blkshclprc( blkshptprc( blshift( bnot( bor( "
"brshift( bxor( byte( "
"call cat( catq( cats( catt( catx( cdf( ceil( ceilz( cexist( char( choosec( choosen( cinv( clibexist( close( cmiss( "
"cnonct( coalesce( coalescec( collate( comb( compare( compbl( compcost( compfuzz( compfuzz_miss( compged( complev( "
"compound( compress( compsrv_oval( compsrv_unquote2( constant( convx( convxp( cos( cosh( cot( count( countc( countw( "
"csc( css( cumipmt( cumprinc( curobs( cv( "
"daccdb( daccdbsl( daccsl( daccsyd( dacctab( dairy( datdif( date( datejul( datepart( datetime( day( dclose( dcreate( "
"depdb( depdbsl( depsl( depsyd( deptab( dequote( deviance( dhms( dif( digamma( dim( dinfo( divide( dlgcdir( dnum( "
"dopen( doptname( doptnum( dosubl( dread( dropnote( dsname( dur( durp( "
"effrate( envlen( erf( erfc( euclid( execute( exist( exp( expm1( "
"fact( fappend( fclose( fcol( fcopy( fdelete( fetch( fetchobs( fexist( fget( "
"fileexist( filename( fileref( finance( find( findc( findw( finfo( finv( fipname( fipnamel( fipstate( first( "
"floor( floorz( fmtinfo( fnonct( fnote( fopen( foptname( foptnum( fpoint( fpos( fput( fread( frewind( frlen( fsep( fuzz( "
"fwrite( "
"gaminv( gamma( garkhclprc( garkhptprc( gcd( "
"geodist( geomean( geomeanz( getcasurl( getlcaslib( getlsessref( getltag( getoption( getsessopt( getvarc( getvarn( "
"graycode( "
"harmean( harmeanz( hash_fast_hex( hash_xx_hex( "
"hashing( hashing_file( hashing_hmac( hashing_hmac_file( hashing_hmac_init( hashing_init( hashing_part( hashing_term( "
"hbound( hms( holiday( holidayck( holidaycount( holidayname( holidaynx( holidayny( holidaytest( hour( "
"htmldecode( htmlencode( "
"ibessel( ifc( ifn( index( indexc( indexw( input( inputc( inputn( "
"int( intcindex( intck( intcycle( intfit( intfmt( intget( intindex( intnx( intrr( intseas( intshift( inttest( intz( "
"iorcmsg( ipmt( iqr( irr( is8601_convert( "
"jbessel( jsonpp( juldate( juldate7( kurtosis( "
"label( lag( largest( lbound( lcm( lcomb( left( length( lengthc( lengthm( lengthn( lexcomb( lexcombi( lexperk( lexperm( "
"lfact( lgamma( libname( libref( log( log10( log1px( log2( logbeta( logcdf( logistic( logpdf( logsdf( lowcase( "
"lperm( lpnorm( "
"mad( margrclprc( margrptprc( max( md5( mdy( mean( median( min( minute( missing( "
"mod( modexist( module( modulec( modulen( modz( month( mopen( mort( msplint( mvalid( "
"n( netpv( nliteral( nmiss( nomrate( normal( notalnum( notalpha( notcntrl( notdigit( note( notfirst( notgraph( notlower( "
"notname( notprint( notpunct( notspace( notupper( notxdigit( npv( nvalid( nwkdom( "
"open( ordinal( "
"pathname( pctl( pdf( peekclong( peeklong( perm( pmt( point( poisson( pokelong( ppmt( "
"probbeta( probbnml( probbnrm( probchi( probf( probgam( probhypr( probit( probmc( probmed( probnegb( probnorm( probt( "
"propcase( prxchange( prxdebug( prxfree( prxmatch( prxnext( prxparen( prxparse( prxposn( prxsubstr( ptrlongadd( "
"put( putc( putn( pvp( "
"qtr( quantile( quote( "
"ranbin( rancau( rancomb( rand( ranexp( rangam( range( rank( rannor( ranperk( ranperm( ranpoi( rantbl( rantri( ranuni( "
"rename( repeat( resolve( reverse( rewind( right( rms( round( rounde( roundz( "
"saving( savings( scan( sdf( sec( second( sessbusy( sessfound( set( sha256( sha256hex( sha256hmachex( sign( sin( sinh( "
"skewness( sleep( smallest( softmax( sort( sortc( sortn( soundex( spedis( sqrt( squantile( "
"std( stderr( stdize( stfips( stname( stnamel( stream( streaminit( streamrewind( strip( "
"subpad( substr( substrn( sum( sumabs( symexist( symget( symgetn( symglobl( symlocal( symput( symputx( "
"sysexist( sysget( sysmsg( sysparm( sysprocessid( sysprocessname( sysprod( sysrc( system( "
"tan( tanh( time( timepart( timevalue( tinv( tnonct( today( translate( transtrn( tranwrd( trigamma( trim( trimn( trunc( "
"tslvl( typeof( tzoneid( tzonename( tzoneoff( tzones2u( tzoneu2s( "
"uniform( upcase( urldecode( urlencode( uss( uuidgen( "
"var( varfmt( varinfmt( varlabel( varlen( varname( varnum( varray( varrayx( vartype( verify( "
"vformat( vformatd( vformatdx( vformatn( vformatnx( vformatw( vformatwx( vformatx( "
"vinarray( vinarrayx( vinformat( vinformatd( vinformatdx( vinformatn( vinformatnx( vinformatw( vinformatwx( vinformatx( "
"vlabel( vlabelx( vlength( vlengthx( vname( vnamex( vnext( vtype( vtypex( vvalue( vvaluex( "
"week( weekday( whichc( whichn( year( yieldp( yrdif( yyq( "
"zipcity( zipcitydistance( zipfips( zipname( zipnamel( zipstate( "

, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr, nullptr
//--Autogenerated -- end of section automatically generated
}};

static EDITSTYLE Styles_SAS[] = {
	EDITSTYLE_DEFAULT,
	{ SCE_SAS_WORD, NP2StyleX_Keyword, L"bold; fore:#FF8000" },
	{ SCE_SAS_MACRO_KEYWORD, NP2StyleX_MacroKeyword, L"bold; fore:#FF8040" },
	{ SCE_SAS_MACRO_FUNCTION, NP2StyleX_MacroFunction, L"fore:#C65D09" },
	{ SCE_SAS_MACRO, NP2StyleX_Macro, L"fore:#008080" },
	{ SCE_SAS_BASIC_FUNCTION, NP2StyleX_BasicFunction, L"fore:#A46000" },
	{ MULTI_STYLE(SCE_SAS_COMMENT, SCE_SAS_COMMENTBLOCK, 0, 0), NP2StyleX_Comment, L"fore:#608060" },
	{ MULTI_STYLE(SCE_SAS_STRINGDQ, SCE_SAS_STRINGSQ, 0, 0), NP2StyleX_String, L"fore:#008000" },
	{ SCE_SAS_NUMBER, NP2StyleX_Number, L"fore:#FF0000" },
	{ SCE_SAS_OPERATOR, NP2StyleX_Operator, L"fore:#B000B0" },
};

EDITLEXER lexSAS = {
	SCLEX_SAS, NP2LEX_SAS,
//Settings++Autogenerated -- start of section automatically generated
		LexerAttr_NoLineComment |
		LexerAttr_IndentBasedFolding |
		LexerAttr_IndentLookForward,
		TAB_WIDTH_4, INDENT_WIDTH_4,
		(1 << 1), // level1
		0,
		'\\', 0, 0,
		0,
		0, 0,
		SCE_SAS_OPERATOR, 0
		, KeywordAttr32(0, KeywordAttr_PreSorted) // keywords
		| KeywordAttr32(1, KeywordAttr_PreSorted | KeywordAttr_NoAutoComp) // macro
		| KeywordAttr32(2, KeywordAttr_PreSorted) // functions
		, SCE_SAS_COMMENTBLOCK,
		SCE_SAS_STRINGDQ, SCE_SAS_STRINGSQ,
//Settings--Autogenerated -- end of section automatically generated
	EDITLEXER_HOLE(L"SAS File", Styles_SAS),
	L"sas; sps",
	&Keywords_SAS,
	Styles_SAS
};
